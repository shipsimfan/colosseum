struct CameraBuffer {
    projection: float4x4,
}

struct ObjectBuffer {
    object: float4x4,
    tint: float4,
}

struct TilemapBuffer {
    size: float2,
    sprite_size: float,
    reserved: float,
}

struct VertexInputType {
    position: float4 : POSITION,
    color: float4 : COLOR,
    uv: float2 : TEXCOORD,
}

struct PixelInputType {
    position: float4 : SV_POSITION,
    color: float4 : COLOR,
    uv: float2: TEXCOORD,
}

cbuffer camera: CameraBuffer : 0;
cbuffer object: ObjectBuffer : 1;
cbuffer tilemap: TilemapBuffer : 2;

texture shader_texture : 0;
texture<uint> data_texture : 1;

fn vertex_main(vertex_input: VertexInputType) -> PixelInputType {
    return PixelInputType {
        position: ((vertex_input.position * object.object) * camera.projection),
        color: vertex_input.color * object.tint,
        uv: vertex_input.uv,
    };
}

fn fragment_main(pixel_input: PixelInputType) -> float4 {
    let index = uint_to_float(load(data_texture, float3(pixel_input.uv.x * tilemap.size.x, pixel_input.uv.y * tilemap.size.y, 0.0)));
    
    let value = index * tilemap.sprite_size;
    let sub_value = frac2(pixel_input.uv * float2(256.0, 128.0)) * float2(1.0, tilemap.sprite_size);
    
    return sample_texture(shader_texture, float2(0.0, 1.0 - value) + sub_value);
}